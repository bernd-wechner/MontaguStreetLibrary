#!/bin/bash
##############################################################################################################################
# Back a database up on one server, then restore it
# on another server.
#
# This is VERY dangerous. And will rename the target databse
# not ovewriting it.
#
# The intent here is to fluidly move a live database to a dev,
# test or sandbox server and maybe back again.
##############################################################################################################################

show_help_and_exit () {
	echo "Usage: copy_database [-DS] source destination"
	echo ""
	echo "where:"
	echo "  -S use SQL for the backup and restore rather than the PostgreSQL binary (custom) format"
	echo "  -D Dry run, for debugging (echoes commands rather than executing them)"
	echo "  -V verbose (add some extra diagnostic output)"
	echo "	source is the name of a postgresql server to copy from"
	echo "	destination is the name of a postgresql server to copy to"
	echo ""
	echo "local is an acceptable abbreviation for localhost"
	echo ""
	exit
}

##############################################################################################################################
# CAPTURE ARGS

test_args=false
dry_run=false
use_sql=false
verbose=false

while getopts "0SDVh" flag; do
	case "$flag" in
	    0) test_args=true ;;
	    S) use_sql=true ;;
		D) dry_run=true ;;
		V) verbose=true ;;
		h) show_help_and_exit;;
	esac
done

# Basic names of source and target host (for naming files and reporting etc)
source_hostname="${@:$OPTIND:1}"
target_hostname="${@:$OPTIND+1:1}"

# permit an alias of "local" for "localhost"
if [ "$source_hostname" = "local" ];then
	source_hostname="localhost"
fi

if [ "$target_hostname" = "local" ];then
	target_hostname="localhost"
fi

# If only one argument then assume it is a destination and localhost the source. Unless of course it is localhost.
if [ "$source_hostname" != "" ] && [ "$target_hostname" = "" ]; then
	if [ "$source_hostname" != "localhost" ] ;then
		target_hostname="$source_hostname"
		source_hostname="localhost"
	fi
fi

if [ $test_args = true ] || [ $verbose = true ]; then
	echo "test_args: $test_args"
	echo "dry_run: $dry_run"
	echo "verbose: $verbose"
	echo "source_hostname: $source_hostname"
	echo "target_hostname: $target_hostname"
	if [ $test_args = true ]; then
		exit
	fi
fi;

if [ "$target_hostname" = "" ]; then
	echo "No destination specified."
	show_help_and_exit;
fi

# Find the source dir (we assume this script is living in a directory
# just below the source directory for now like $source_dir/Scripts.
source_dir=$(cd `dirname $0`/.. && pwd)

##############################################################################################################################
# CONFIGS - requires args already captured

# The name of the database to copy (should be same on source and target systems)
database=MontaguStreetLibrary

# The database username to use when backing up and restoring (should be same on source and target systems)
username=postgres

# The database username that owns the database
ownername=montagu
ownerpass=6Montagu

# The port that Postgresql is configured to use (default 5432, should be same on source and target systems)
port=5432

# The local domain name (expected at end of server names, added if missing)
localdomain="lan"

# The Backup Dir
backup_dir="$source_dir/Backups"

# Prefix on backup file names
backup_prefix=$(date +%Y-%m-%d)

# The suffix for old Database (it has this appended to name before it's restored to the old name, thus keeping a backup)
backup_suffix=$(date +%s)

# resolveable domain names for the source and target host (we append the local domain if it's not localhost)
if [ "$source_hostname" = "localhost" ];then
	source_host="$source_hostname"
elif [[ "$source_hostname" = *.$localdomain ]]; then
	source_host="$source_hostname"
else
	source_host="$source_hostname.$localdomain"
fi

if [ "$target_hostname" = "localhost" ];then
	target_host="$target_hostname"
elif [[ "$target_hostname" = *.$localdomain ]]; then
	target_host="$target_hostname"
else
	target_host="$target_hostname.$localdomain"
fi

##############################################################################################################################
# INTERNAL CONFIGS

# A couple of basic warnings strings
# Note: The passwords for source and target databases must be stored in ~/.pgpass
# 	see: https://www.postgresql.org/docs/current/libpq-pgpass.html
# or this will prompt for one on each access command
source_pass_warn="(if this prompts for a password it is for $username on $source_host database and should be stored in ~/.pgpass under '$source_host')"
target_pass_warn="(if this prompts for a password it is for $username on $target_host database and should be stored in ~/.pgpass under '$target_host')"

# Ensure the dir exists
[ ! -d "${backup_dir}" ] && mkdir ${backup_dir}

# Define the backup filenames we will use
# Follow this naming convention: 2019-07-05 HOGS Database.backup
if [ $use_sql = true ]; then backup_extension="sql"; else backup_extension="backup"; fi  
backup_file_sourcedb="$backup_dir/$backup_prefix $database Database - $source_hostname.$backup_extension"
backup_file_targetdb="$backup_dir/$backup_prefix $database Database - $target_hostname.$backup_extension"

# psql arguments for the source and target database (use the postgres user for this)
source_db="--host=$source_host --port=$port --username=postgres"
target_db="--host=$target_host --port=$port --username=postgres"
sql_opts="--tuples-only --quiet"

if [ $dry_run = true ] | [ $verbose = true ]; then
	echo source_hostname: $source_hostname
	echo target_hostname: $target_hostname
	echo source_host: $source_host
	echo target_host: $target_host
	echo source_dir: $source_dir
	echo source_pass_warn: $source_pass_warn
	echo target_pass_warn: $target_pass_warn
	echo backup_prefix: $backup_prefix
	echo backup_suffix: $backup_suffix
	echo backup_extension: $backup_extension
	echo backup_file_sourcedb: $backup_file_sourcedb
	echo backup_file_targetdb: $backup_file_targetdb
	echo source_db: $source_db
	echo target_db: $target_db
	echo database: "\"${database}\""
	echo backup db: "\"${database}_$backup_suffix\""
fi

##############################################################################################################################
# DO THE WORK

# A prefix to use before commands that do stuff
if [ $dry_run = true ]; then
	prefix="echo "
	echo "Dry run (commands that would be executed are):"
	echo db_on_target=$(psql $target_db $sql_opts --command="SELECT datname FROM pg_catalog.pg_database WHERE datname='$database'")
else
	prefix=""
fi

# A simple sudo echo to prompt for the sudo password so the rest of the script can run
# without it prompting for one mid stream on some command.
#${prefix}echo "This database copy wants sudo privileges."
#${prefix}sudo echo "Copying $source_hostname database to $target_hostname machine"

if [ $use_sql = true ]; then backup_format=""; else backup_format="--format=custom"; fi  

# Back up the source database (custom format is designed for use with pg_restore)
echo "Saving the $source_hostname $database database to $backup_file_source... $source_pass_warn"
${prefix}pg_dump $source_db $backup_format --dbname="$database" --file="$backup_file_sourcedb"
echo -e "\tSaved the $database database to $backup_file_sourcedb."

#Now export the good CoGS database:
#
#```
#sudo -u postgres pg_dump -U postgres -d CoGs -f /tmp/CoGs.sql
#```
#
#Now reinstall the corrupt database, drop COGs, and load it from SQL.
#
#```
#sudo pg_ctlcluster 12 main stop
#sudo rsync -a "/data/postgresql/12/main-corrupt/" "/data/postgresql/12/main"
#sudo pg_ctlcluster 12 main start
#sudo -u postgres psql -c 'DROP DATABASE "CoGs"'
#sudo -u postgres psql -c 'CREATE DATABASE "CoGs";'
#sudo -u postgres psql -d CoGs -f /tmp/CoGs.sql
#```

echo "Saved the $source_hostname $database database to $backup_file_sourcedb."

# Check if the target database exists
db_on_target=$(psql $target_db $sql_opts --command="SELECT datname FROM pg_catalog.pg_database WHERE datname='$database'")

# For reasons not understood, out of the blue, sometimes the previous command returns the db name with
# a white space prepended. So we remove all spaces for surety. The only thing I found to work!
db_on_target=${db_on_target// /}

if [ "$db_on_target" = "$database" ]; then
	# Back up the target database
	echo "Saving the $target_hostname $database database to $backup_file_target... $target_pass_warn"
	${prefix}pg_dump $target_db $backup_format --dbname="$database" --file="$backup_file_targetdb"
	echo -e "\tSaved the $database database to $backup_file_targetdb."
else
	echo "The $target_hostname $database database does not exist yet."
	echo because \"$db_on_target\" != \"$database\"
fi

# Assume we're running on a development machine and all other targets are
# ssh reachable and webservers where UWSGI has database connections open
if [ "$target_hostname" != "localhost" ];then
	# Stop UWSGI on the target site (so as to unlock the target database)
	# Need password-free root ssh access to the server setup for this
	echo "Stopping the UWSGI service on $target_hostname"
	${prefix}ssh root@$target_host "service uwsgi stop"
fi

# Disconnect the processes using the database
echo "Disconnecting users... $target_pass_warn"
${prefix}psql $target_db $sql_opts --command="SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = '$database';"

# If it exists, rename the target database
if [ "$db_on_target" = "$database" ]; then
	# Rename database to database_timestamp on the target server
	echo "Renaming database $database to ${database}_$backup_suffix on $target_hostname ..."
	${prefix}psql $target_db $sql_opts --command="ALTER DATABASE \"$database\" RENAME TO \"${database}_$backup_suffix\";"
fi

# If the owner for the target database does not exist create it
role_exists=$(psql $target_db $sql_opts --command="SELECT 1 FROM pg_roles WHERE rolname='$ownername'")

# For reasons not understood, out of the blue, sometimes the previous command returns the resultwith
# a white space prepended. So we remove all spaces for surety. The only thing I found to work!
role_exists=${role_exists// /}

if [ ! "$role_exists" == "1" ]; then
  ${prefix}psql $target_db $sql_opts --command="CREATE ROLE $ownername LOGIN PASSWORD '$ownerpass';"
  echo "Created role \"$ownername\"."
fi

# Recreate the database in the target database
echo "Recreating (empty) $database database on $target_hostname ..."
${prefix}psql $target_db $sql_opts --command="CREATE DATABASE \"$database\" OWNER '$ownername';"

# Now restore the source system backup to the target system
echo "Loading the $source_hostname $database database on $target_hostname ..."


if [ $use_sql = true ]; then
	${prefix}psql $target_db  $sql_opts --dbname="$database" --file="$backup_file_sourcedb"
else
	${prefix}pg_restore $target_db --dbname="$database" "$backup_file_sourcedb"
fi  

# Assume we're running on a development machine and all other targets are
# ssh reachable and webservers where UWSGI has database connections open
if [ "$target_hostname" != "localhost" ];then
	# Restart UWSGI on the target site
	echo "Restarting the UWSGI service on $target_hostname"
	${prefix}ssh root@$target_host "service uwsgi start"
fi

echo "Done."
