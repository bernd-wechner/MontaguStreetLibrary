"""
Django settings for MontaguStreetLibrary project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import platform, sys, os

from pathlib import Path
from tzlocal import get_localzone

DEBUG_CONFIG = False

SITE_TITLE = "Montagu Street Library"


# Make sure the SITE_TITLE is visible in context
# Add reference to this function under TEMPLATES
def site_context(request):  # @UnusedVariable
    return {"SITE_TITLE": SITE_TITLE}


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# This is where manage.py collectstatic will place all the static files
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# And this is the URL where static files will be expected by django pages
STATIC_URL = "/static/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_@3h$dm+501eh7^-1w3t$j=005ly115t#)jktx21#a3xyp%ue1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["street-library.info", "montagu.street-library.info", "127.0.0.1"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'reset_migrations',
    'django_rich_views',
    'Site',
    'Doors'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'Site.settings.site_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'Site.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'MontaguStreetLibrary',
        'USER': 'montagu',
        'PASSWORD': '6Montagu',
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_TZ = False
TIME_ZONE = str(get_localzone())

USE_I18N = True
USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# TUYA Settings

TUYA_KEY = "nsk4pxgkmmggs5ffqxkd"
TUYA_SECRET = "7ae1449c9391466a85c3c427a1bfb1c9"
TUYA_REGION = "eu"
TUYA_DEVICE_ID = "bf1cd2c1afb79af64f1nkq"

# Configure the context
HOSTNAME = platform.node().lower()

# The name of the webserver this is running on (used to select deployment settings)
PRODUCTION = "shelob"
SANDBOX = "arachne"

SITE_IS_LIVE = HOSTNAME in [PRODUCTION, SANDBOX]

# Configure logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':
        { 'dev': { 'format':
        '%(prefix)s%(relativeReference)9.4f, %(relativeLast)9.4f, %(filename)20s:%(lineno)4d, %(funcName)20s - %(message)s%(postfix)s'},

         'live': { 'format':
         '%(asctime)s.%(msecs).03d  - %(relativeReference)9.4f - %(relativeLast)9.4f - %(process)d - %(thread)d - %(levelname)8s - %(filename)20s:%(lineno)4d - %(funcName)20s - %(message)s'}
        }
}

if SITE_IS_LIVE:
    # Only meaningful of logging is enabled on the Live site. Setting DEBUG to true here will enable debug logging of course.
    # In future could log requests one by one.
    LOGGING['handlers'] = { 'file': {
                                    'level': 'DEBUG',
                                    'class': 'logging.handlers.TimedRotatingFileHandler',
                                    'filename': '/data/log/CoGs/django.log',
                                    'when': 'midnight',
                                    'formatter': 'live'
                                    }
                           }

    LOGGING['loggers'] = { 'MSL': { 'handlers': ['file'], 'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG') } }
else:
    LOGGING['handlers'] = { 'console': {
                                    'level': 'DEBUG',
                                    'class': 'logging.StreamHandler',
                                    'stream': sys.stdout,  # Optional but forces text black, without this DEBUG text is red.
                                    'formatter': 'dev'
                                    }
                           }

    LOGGING['loggers'] = { 'MSL': { 'handlers': ['console'], 'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG') } }

# Pass our logger to Django Rich Views
from Site.logutils import log
from logging import DEBUG as loglevel_DEBUG
import logging.config

import django_rich_views.logs
django_rich_views.logs.logger = log

# Log some config debugs'reset_migrations'
if DEBUG_CONFIG:
    import django  # So we have access to the version for reporting
    import psutil  # So we can access process details

    def pinfo():
        pid = os.getpid()
        ppid = os.getppid()
        P = psutil.Process(pid)
        PP = psutil.Process(ppid)
        return {'Me': f'pid={pid}, name={P.name()}, commandline={P.cmdline()}, started={P.create_time()}',
                'My Parent': f'pid={ppid}, name={PP.name()}, commandline={PP.cmdline()}, started={PP.create_time()}'}

    # Unsure why, byt logging seems not enabled yet at this point, so to be be able to log we need to enable it for DEBUG
    # explicitly and load the config above explicitly. It works outside of settings.py without this, not sure why in herr
    # the logger appear unconfigured at this point.
    log.setLevel(loglevel_DEBUG)
    logging.config.dictConfig(LOGGING)

    log.debug(f"Django settings: {'Live' if SITE_IS_LIVE else 'Development'} Server")
    log.debug(f"Django version: {django.__version__}")
    log.debug(f"Python version: {sys.version}")
    log.debug(f"Django loaded from: {django.__file__}")
    log.debug(f"Using Path: {sys.path}")
    log.debug(f"Process Info: {pinfo()}")
    log.debug(f"Static root: {STATIC_ROOT}")
    log.debug(f"Static file dirs: {locals().get('STATICFILES_DIRS', globals().get('STATICFILES_DIRS', []))}")
    log.debug(f"Database: {DATABASES['default']}")
    log.debug(f"Debug: {DEBUG}")
